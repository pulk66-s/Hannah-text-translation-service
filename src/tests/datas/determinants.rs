pub fn defined_articles() -> Vec<String> {
    vec![
        "le".to_string(),
        "Le".to_string(),
        "lE".to_string(),
        "LE".to_string(),
        " le ".to_string(),
        " Le ".to_string(),
        " lE ".to_string(),
        " LE ".to_string(),
        "la".to_string(),
        "La".to_string(),
        "lA".to_string(),
        "LA".to_string(),
        " la ".to_string(),
        " La ".to_string(),
        " lA ".to_string(),
        " LA ".to_string(),
        "les".to_string(),
        "Les".to_string(),
        "lEs".to_string(),
        "LEs".to_string(),
        "leS".to_string(),
        "LeS".to_string(),
        "lES".to_string(),
        "LES".to_string(),
        " les ".to_string(),
        " Les ".to_string(),
        " lEs ".to_string(),
        " LEs ".to_string(),
        " leS ".to_string(),
        " LeS ".to_string(),
    ]
}

pub fn undefined_articles() -> Vec<String> {
    vec![
        "un".to_string(),
        "Un".to_string(),
        "uN".to_string(),
        "UN".to_string(),
        " un ".to_string(),
        " Un ".to_string(),
        " uN ".to_string(),
        " UN ".to_string(),
        "une".to_string(),
        "Une".to_string(),
        "uNe".to_string(),
        "UNe".to_string(),
        "unE".to_string(),
        "UnE".to_string(),
        "uNE".to_string(),
        " UNE ".to_string(),
        " Une ".to_string(),
        " uNe ".to_string(),
        " UNe ".to_string(),
        " unE ".to_string(),
        " UnE ".to_string()
    ]
}

pub fn partial_articles() -> Vec<String> {
    vec![
        "du".to_string(),
        "Du".to_string(),
        "dU".to_string(),
        "DU".to_string(),
        " du ".to_string(),
        " Du ".to_string(),
        " dU ".to_string(),
        " DU ".to_string(),
        "des".to_string(),
        "Des".to_string(),
        "dEs".to_string(),
        "DEs".to_string(),
        "deS".to_string(),
        "DeS".to_string(),
    ]
}

pub fn possessive_adjectives() -> Vec<String> {
    vec![
        "mon".to_string(),
        "Mon".to_string(),
        "mOn".to_string(),
        "MON".to_string(),
        " mon ".to_string(),
        " Mon ".to_string(),
        " mOn ".to_string(),
        "ton".to_string(),
        "Ton".to_string(),
        "tOn".to_string(),
        " TON ".to_string(),
        " Ton ".to_string(),
        " tOn ".to_string(),
        "son".to_string(),
        "Son".to_string(),
        "sOn".to_string(),
        " SON ".to_string(),
        " Son ".to_string(),
        " sOn ".to_string(),
        "notre".to_string(),
        "Notre".to_string(),
        "nOtre".to_string(),
        "NOtre".to_string(),
        "noTre".to_string(),
        " Notre ".to_string(),
        " Notre ".to_string(),
        " nOtre ".to_string(),
        " NOtre ".to_string(),
        "votre".to_string(),
        "Votre".to_string(),
        "vOtre".to_string(),
        "VOtre".to_string(),
        " voTre ".to_string(),
        " VoTre ".to_string(),
        " vOtre ".to_string(),
        " VOtre ".to_string(),
        "leur".to_string(),
        "Leur".to_string(),
        "lEur".to_string(),
        "LEur".to_string(),
        "leUr".to_string(),
        " leur ".to_string(),
        " Leur ".to_string(),
        " lEur ".to_string(),
        " LEur ".to_string(),
    ]
}

pub fn demonstrative_adjectives() -> Vec<String> {
    vec![
        "ce".to_string(),
        "Ce".to_string(),
        "cE".to_string(),
        "CE".to_string(),
        " ce ".to_string(),
        " Ce ".to_string(),
        " cE ".to_string(),
        " CE ".to_string(),
        "cet".to_string(),
        "Cet".to_string(),
        "cEt".to_string(),
        "CET".to_string(),
        " cet ".to_string(),
        " Cet ".to_string(),
        "cette".to_string(),
        "Cette".to_string(),
        "cEtte".to_string(),
        "CEtte".to_string(),
        "ceTte".to_string(),
        "CetTe".to_string(),
        " cEtte ".to_string(),
        " Cette ".to_string(),
        " cEtte ".to_string(),
        " CEtte ".to_string(),
        " ceTte ".to_string(),
        "ces".to_string(),
        "Ces".to_string(),
        "cEs".to_string(),
        "CEs".to_string(),
        " ceS ".to_string(),
        " Ces ".to_string(),
        " cEs ".to_string(),
        " CEs ".to_string(),
    ]
}

pub fn undefined_adjectives() -> Vec<String> {
    vec![
        "chaque".to_string(),
        "Chaque".to_string(),
        "chAque".to_string(),
        "CHAque".to_string(),
        "chaQue".to_string(),
        "Chaque".to_string(),
        " chAque ".to_string(),
        " ChAque ".to_string(),
        " chAque ".to_string(),
        " CHAque ".to_string(),
        " chaQue ".to_string(),
        "tout".to_string(),
        "Tout".to_string(),
        "tOut".to_string(),
        "TOut".to_string(),
        "toUt".to_string(),
        " Tout ".to_string(),
        " Tout ".to_string(),
        " tOut ".to_string(),
        "aucun".to_string(),
        "Aucun".to_string(),
        "aUcun".to_string(),
        "AUcun".to_string(),
        "auCun".to_string(),
        " AuCun ".to_string(),
        " aUcun ".to_string(),
        " AUcun ".to_string(),
        " auCun ".to_string(),
        "quelques".to_string(),
        "Quelques".to_string(),
        "qUelques".to_string(),
        "QUElques".to_string(),
        " queLques ".to_string(),
        " Quelques ".to_string(),
        " qUelques ".to_string(),
        " QUElques ".to_string(),
        " queLques ".to_string(),
    ]
}

pub fn numerals_adjectives() -> Vec<String> {
    vec![
        "un".to_string(),
        "Un".to_string(),
        "uN".to_string(),
        "UN".to_string(),
        " un ".to_string(),
        " Un ".to_string(),
        " uN ".to_string(),
        " UN ".to_string(),
        "deux".to_string(),
        "Deux".to_string(),
        "dEux".to_string(),
        "DEux".to_string(),
        " deUx ".to_string(),
        " Deux ".to_string(),
        " dEux ".to_string(),
        " DEux ".to_string(),
        "trois".to_string(),
        "Trois".to_string(),
        "tRois".to_string(),
        "TRois".to_string(),
        " trOis ".to_string(),
        " Trois ".to_string(),
        " tRois ".to_string(),
        " TRois ".to_string(),
        "quatre".to_string(),
        "Quatre".to_string(),
        "qUatre".to_string(),
        "QUatre".to_string(),
        " quaTre ".to_string(),
        " Quatre ".to_string(),
        " qUatre ".to_string(),
        " QUatre ".to_string(),
    ]
}